// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleManager/Protocol/BM2CM.CODE.proto

#include "BattleManager/Protocol/BM2CM.CODE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Protocol {
namespace BattleManager {
namespace BM2CM {
class MSG_BM2CM_HEARTBEATDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MSG_BM2CM_HEARTBEAT>
      _instance;
} _MSG_BM2CM_HEARTBEAT_default_instance_;
class MSG_BM2CM_REGISTERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MSG_BM2CM_REGISTER>
      _instance;
} _MSG_BM2CM_REGISTER_default_instance_;
}  // namespace BM2CM
}  // namespace BattleManager
}  // namespace Protocol
namespace protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto {
void InitDefaultsMSG_BM2CM_HEARTBEATImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocol::BattleManager::BM2CM::_MSG_BM2CM_HEARTBEAT_default_instance_;
    new (ptr) ::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT::InitAsDefaultInstance();
}

void InitDefaultsMSG_BM2CM_HEARTBEAT() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMSG_BM2CM_HEARTBEATImpl);
}

void InitDefaultsMSG_BM2CM_REGISTERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocol::BattleManager::BM2CM::_MSG_BM2CM_REGISTER_default_instance_;
    new (ptr) ::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER::InitAsDefaultInstance();
}

void InitDefaultsMSG_BM2CM_REGISTER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMSG_BM2CM_REGISTERImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT, subid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER, groupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER, subid_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Protocol::BattleManager::BM2CM::MSG_BM2CM_HEARTBEAT)},
  { 9, 16, sizeof(::Protocol::BattleManager::BM2CM::MSG_BM2CM_REGISTER)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocol::BattleManager::BM2CM::_MSG_BM2CM_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocol::BattleManager::BM2CM::_MSG_BM2CM_REGISTER_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "BattleManager/Protocol/BM2CM.CODE.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'BattleManager/Protocol/BM2CM.CODE.prot"
      "o\022\034Protocol.BattleManager.BM2CM\"5\n\023MSG_B"
      "M2CM_HEARTBEAT\022\017\n\007GroupId\030\001 \002(\005\022\r\n\005SubId"
      "\030\002 \002(\005\"4\n\022MSG_BM2CM_REGISTER\022\017\n\007GroupId\030"
      "\001 \002(\005\022\r\n\005SubId\030\002 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleManager/Protocol/BM2CM.CODE.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto
namespace Protocol {
namespace BattleManager {
namespace BM2CM {

// ===================================================================

void MSG_BM2CM_HEARTBEAT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MSG_BM2CM_HEARTBEAT::kGroupIdFieldNumber;
const int MSG_BM2CM_HEARTBEAT::kSubIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MSG_BM2CM_HEARTBEAT::MSG_BM2CM_HEARTBEAT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::InitDefaultsMSG_BM2CM_HEARTBEAT();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
}
MSG_BM2CM_HEARTBEAT::MSG_BM2CM_HEARTBEAT(const MSG_BM2CM_HEARTBEAT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&subid_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
}

void MSG_BM2CM_HEARTBEAT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subid_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
}

MSG_BM2CM_HEARTBEAT::~MSG_BM2CM_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  SharedDtor();
}

void MSG_BM2CM_HEARTBEAT::SharedDtor() {
}

void MSG_BM2CM_HEARTBEAT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_BM2CM_HEARTBEAT::descriptor() {
  ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MSG_BM2CM_HEARTBEAT& MSG_BM2CM_HEARTBEAT::default_instance() {
  ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::InitDefaultsMSG_BM2CM_HEARTBEAT();
  return *internal_default_instance();
}

MSG_BM2CM_HEARTBEAT* MSG_BM2CM_HEARTBEAT::New(::google::protobuf::Arena* arena) const {
  MSG_BM2CM_HEARTBEAT* n = new MSG_BM2CM_HEARTBEAT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MSG_BM2CM_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subid_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MSG_BM2CM_HEARTBEAT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GroupId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 SubId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_subid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  return false;
#undef DO_
}

void MSG_BM2CM_HEARTBEAT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 SubId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
}

::google::protobuf::uint8* MSG_BM2CM_HEARTBEAT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 SubId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  return target;
}

size_t MSG_BM2CM_HEARTBEAT::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  size_t total_size = 0;

  if (has_groupid()) {
    // required int32 GroupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_subid()) {
    // required int32 SubId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subid());
  }

  return total_size;
}
size_t MSG_BM2CM_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 GroupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 SubId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_BM2CM_HEARTBEAT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_BM2CM_HEARTBEAT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MSG_BM2CM_HEARTBEAT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
    MergeFrom(*source);
  }
}

void MSG_BM2CM_HEARTBEAT::MergeFrom(const MSG_BM2CM_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000002u) {
      subid_ = from.subid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_BM2CM_HEARTBEAT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_BM2CM_HEARTBEAT::CopyFrom(const MSG_BM2CM_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_BM2CM_HEARTBEAT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MSG_BM2CM_HEARTBEAT::Swap(MSG_BM2CM_HEARTBEAT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MSG_BM2CM_HEARTBEAT::InternalSwap(MSG_BM2CM_HEARTBEAT* other) {
  using std::swap;
  swap(groupid_, other->groupid_);
  swap(subid_, other->subid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MSG_BM2CM_HEARTBEAT::GetMetadata() const {
  protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MSG_BM2CM_REGISTER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MSG_BM2CM_REGISTER::kGroupIdFieldNumber;
const int MSG_BM2CM_REGISTER::kSubIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MSG_BM2CM_REGISTER::MSG_BM2CM_REGISTER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::InitDefaultsMSG_BM2CM_REGISTER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
}
MSG_BM2CM_REGISTER::MSG_BM2CM_REGISTER(const MSG_BM2CM_REGISTER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&subid_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
}

void MSG_BM2CM_REGISTER::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subid_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
}

MSG_BM2CM_REGISTER::~MSG_BM2CM_REGISTER() {
  // @@protoc_insertion_point(destructor:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  SharedDtor();
}

void MSG_BM2CM_REGISTER::SharedDtor() {
}

void MSG_BM2CM_REGISTER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_BM2CM_REGISTER::descriptor() {
  ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MSG_BM2CM_REGISTER& MSG_BM2CM_REGISTER::default_instance() {
  ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::InitDefaultsMSG_BM2CM_REGISTER();
  return *internal_default_instance();
}

MSG_BM2CM_REGISTER* MSG_BM2CM_REGISTER::New(::google::protobuf::Arena* arena) const {
  MSG_BM2CM_REGISTER* n = new MSG_BM2CM_REGISTER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MSG_BM2CM_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subid_) -
        reinterpret_cast<char*>(&groupid_)) + sizeof(subid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MSG_BM2CM_REGISTER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 GroupId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 SubId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_subid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  return false;
#undef DO_
}

void MSG_BM2CM_REGISTER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // required int32 SubId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
}

::google::protobuf::uint8* MSG_BM2CM_REGISTER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 GroupId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // required int32 SubId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  return target;
}

size_t MSG_BM2CM_REGISTER::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  size_t total_size = 0;

  if (has_groupid()) {
    // required int32 GroupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  if (has_subid()) {
    // required int32 SubId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subid());
  }

  return total_size;
}
size_t MSG_BM2CM_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 GroupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

    // required int32 SubId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_BM2CM_REGISTER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_BM2CM_REGISTER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MSG_BM2CM_REGISTER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
    MergeFrom(*source);
  }
}

void MSG_BM2CM_REGISTER::MergeFrom(const MSG_BM2CM_REGISTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      groupid_ = from.groupid_;
    }
    if (cached_has_bits & 0x00000002u) {
      subid_ = from.subid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_BM2CM_REGISTER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_BM2CM_REGISTER::CopyFrom(const MSG_BM2CM_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BattleManager.BM2CM.MSG_BM2CM_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_BM2CM_REGISTER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MSG_BM2CM_REGISTER::Swap(MSG_BM2CM_REGISTER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MSG_BM2CM_REGISTER::InternalSwap(MSG_BM2CM_REGISTER* other) {
  using std::swap;
  swap(groupid_, other->groupid_);
  swap(subid_, other->subid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MSG_BM2CM_REGISTER::GetMetadata() const {
  protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BattleManager_2fProtocol_2fBM2CM_2eCODE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BM2CM
}  // namespace BattleManager
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
